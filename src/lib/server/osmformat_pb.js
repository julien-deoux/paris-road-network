//* Copyright (c) 2010 Scott A. Crosby. <scott@sacrosby.com>
//
//Permission is hereby granted, free of charge, to any person obtaining a copy of
//this software and associated documentation files (the "Software"), to deal in
//the Software without restriction, including without limitation the rights to
//use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
//of the Software, and to permit persons to whom the Software is furnished to do
//so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.
//

// @generated by protoc-gen-es v1.10.0
// @generated from file osmformat.proto (package OSMPBF, syntax proto2)
/* eslint-disable */
// @ts-nocheck

import { proto2, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message OSMPBF.HeaderBlock
 */
export const HeaderBlock = /*@__PURE__*/ proto2.makeMessageType(
  "OSMPBF.HeaderBlock",
  () => [
    { no: 1, name: "bbox", kind: "message", T: HeaderBBox, opt: true },
    { no: 4, name: "required_features", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "optional_features", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 16, name: "writingprogram", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 17, name: "source", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 32, name: "osmosis_replication_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 33, name: "osmosis_replication_sequence_number", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 34, name: "osmosis_replication_base_url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ],
);

/**
 * @generated from message OSMPBF.HeaderBBox
 */
export const HeaderBBox = /*@__PURE__*/ proto2.makeMessageType(
  "OSMPBF.HeaderBBox",
  () => [
    { no: 1, name: "left", kind: "scalar", T: 18 /* ScalarType.SINT64 */, req: true },
    { no: 2, name: "right", kind: "scalar", T: 18 /* ScalarType.SINT64 */, req: true },
    { no: 3, name: "top", kind: "scalar", T: 18 /* ScalarType.SINT64 */, req: true },
    { no: 4, name: "bottom", kind: "scalar", T: 18 /* ScalarType.SINT64 */, req: true },
  ],
);

/**
 * @generated from message OSMPBF.PrimitiveBlock
 */
export const PrimitiveBlock = /*@__PURE__*/ proto2.makeMessageType(
  "OSMPBF.PrimitiveBlock",
  () => [
    { no: 1, name: "stringtable", kind: "message", T: StringTable, req: true },
    { no: 2, name: "primitivegroup", kind: "message", T: PrimitiveGroup, repeated: true },
    { no: 17, name: "granularity", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true, default: 100 },
    { no: 19, name: "lat_offset", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true, default: protoInt64.zero },
    { no: 20, name: "lon_offset", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true, default: protoInt64.zero },
    { no: 18, name: "date_granularity", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true, default: 1000 },
  ],
);

/**
 * Group of OSMPrimitives. All primitives in a group must be the same type.
 *
 * @generated from message OSMPBF.PrimitiveGroup
 */
export const PrimitiveGroup = /*@__PURE__*/ proto2.makeMessageType(
  "OSMPBF.PrimitiveGroup",
  () => [
    { no: 1, name: "nodes", kind: "message", T: Node, repeated: true },
    { no: 2, name: "dense", kind: "message", T: DenseNodes, opt: true },
    { no: 3, name: "ways", kind: "message", T: Way, repeated: true },
    { no: 4, name: "relations", kind: "message", T: Relation, repeated: true },
    { no: 5, name: "changesets", kind: "message", T: ChangeSet, repeated: true },
  ],
);

/**
 * * String table, contains the common strings in each block.
 *
 * Note that we reserve index '0' as a delimiter, so the entry at that
 * index in the table is ALWAYS blank and unused.
 *
 *
 * @generated from message OSMPBF.StringTable
 */
export const StringTable = /*@__PURE__*/ proto2.makeMessageType(
  "OSMPBF.StringTable",
  () => [
    { no: 1, name: "s", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
  ],
);

/**
 * Optional metadata that may be included into each primitive. 
 *
 * @generated from message OSMPBF.Info
 */
export const Info = /*@__PURE__*/ proto2.makeMessageType(
  "OSMPBF.Info",
  () => [
    { no: 1, name: "version", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true, default: -1 },
    { no: 2, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 3, name: "changeset", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 4, name: "uid", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 5, name: "user_sid", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 6, name: "visible", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ],
);

/**
 * * Optional metadata that may be included into each primitive. Special dense format used in DenseNodes. 
 *
 * @generated from message OSMPBF.DenseInfo
 */
export const DenseInfo = /*@__PURE__*/ proto2.makeMessageType(
  "OSMPBF.DenseInfo",
  () => [
    { no: 1, name: "version", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true, packed: true },
    { no: 2, name: "timestamp", kind: "scalar", T: 18 /* ScalarType.SINT64 */, repeated: true, packed: true },
    { no: 3, name: "changeset", kind: "scalar", T: 18 /* ScalarType.SINT64 */, repeated: true, packed: true },
    { no: 4, name: "uid", kind: "scalar", T: 17 /* ScalarType.SINT32 */, repeated: true, packed: true },
    { no: 5, name: "user_sid", kind: "scalar", T: 17 /* ScalarType.SINT32 */, repeated: true, packed: true },
    { no: 6, name: "visible", kind: "scalar", T: 8 /* ScalarType.BOOL */, repeated: true, packed: true },
  ],
);

/**
 * This is kept for backwards compatibility but not used anywhere.
 *
 * @generated from message OSMPBF.ChangeSet
 */
export const ChangeSet = /*@__PURE__*/ proto2.makeMessageType(
  "OSMPBF.ChangeSet",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */, req: true },
  ],
);

/**
 * @generated from message OSMPBF.Node
 */
export const Node = /*@__PURE__*/ proto2.makeMessageType(
  "OSMPBF.Node",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 18 /* ScalarType.SINT64 */, req: true },
    { no: 2, name: "keys", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true, packed: true },
    { no: 3, name: "vals", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true, packed: true },
    { no: 4, name: "info", kind: "message", T: Info, opt: true },
    { no: 8, name: "lat", kind: "scalar", T: 18 /* ScalarType.SINT64 */, req: true },
    { no: 9, name: "lon", kind: "scalar", T: 18 /* ScalarType.SINT64 */, req: true },
  ],
);

/**
 * @generated from message OSMPBF.DenseNodes
 */
export const DenseNodes = /*@__PURE__*/ proto2.makeMessageType(
  "OSMPBF.DenseNodes",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 18 /* ScalarType.SINT64 */, repeated: true, packed: true },
    { no: 5, name: "denseinfo", kind: "message", T: DenseInfo, opt: true },
    { no: 8, name: "lat", kind: "scalar", T: 18 /* ScalarType.SINT64 */, repeated: true, packed: true },
    { no: 9, name: "lon", kind: "scalar", T: 18 /* ScalarType.SINT64 */, repeated: true, packed: true },
    { no: 10, name: "keys_vals", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true, packed: true },
  ],
);

/**
 * @generated from message OSMPBF.Way
 */
export const Way = /*@__PURE__*/ proto2.makeMessageType(
  "OSMPBF.Way",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */, req: true },
    { no: 2, name: "keys", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true, packed: true },
    { no: 3, name: "vals", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true, packed: true },
    { no: 4, name: "info", kind: "message", T: Info, opt: true },
    { no: 8, name: "refs", kind: "scalar", T: 18 /* ScalarType.SINT64 */, repeated: true, packed: true },
    { no: 9, name: "lat", kind: "scalar", T: 18 /* ScalarType.SINT64 */, repeated: true, packed: true },
    { no: 10, name: "lon", kind: "scalar", T: 18 /* ScalarType.SINT64 */, repeated: true, packed: true },
  ],
);

/**
 * @generated from message OSMPBF.Relation
 */
export const Relation = /*@__PURE__*/ proto2.makeMessageType(
  "OSMPBF.Relation",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */, req: true },
    { no: 2, name: "keys", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true, packed: true },
    { no: 3, name: "vals", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true, packed: true },
    { no: 4, name: "info", kind: "message", T: Info, opt: true },
    { no: 8, name: "roles_sid", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true, packed: true },
    { no: 9, name: "memids", kind: "scalar", T: 18 /* ScalarType.SINT64 */, repeated: true, packed: true },
    { no: 10, name: "types", kind: "enum", T: proto2.getEnumType(Relation_MemberType), repeated: true, packed: true },
  ],
);

/**
 * @generated from enum OSMPBF.Relation.MemberType
 */
export const Relation_MemberType = /*@__PURE__*/ proto2.makeEnum(
  "OSMPBF.Relation.MemberType",
  [
    {no: 0, name: "NODE"},
    {no: 1, name: "WAY"},
    {no: 2, name: "RELATION"},
  ],
);

